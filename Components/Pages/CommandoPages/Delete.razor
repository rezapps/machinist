@page "/commandos/delete"
@inject machinist.Data.MachineContext DB
@using machinist.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Commando</h4>
    <hr />
    @if (commando is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@commando.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Desc</dt>
            <dd class="col-sm-10">@commando.Desc</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ExeTime</dt>
            <dd class="col-sm-10">@commando.ExeTime</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">MachineId</dt>
            <dd class="col-sm-10">@commando.MachineId</dd>
        </dl>
        <EditForm method="post" Model="commando" OnValidSubmit="DeleteCommando" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(commando is null)">Delete</button> |
            <a href="/commandos">Back to List</a>
        </EditForm>
    }
</div>

@code {
    Commando? commando;

    [SupplyParameterFromQuery]
    public int CommandoId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        commando = await DB.Commando.FirstOrDefaultAsync(m => m.CommandoId == CommandoId);

        if (commando is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteCommando()
    {
        DB.Commando.Remove(commando!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/commandos");
    }
}

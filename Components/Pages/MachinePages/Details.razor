@page "/machines/details"
@inject machinist.Data.MachineContext DB
@using machinist.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>Machine</h4>
    <hr />
    @if (machine is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">MachineId</dt>
            <dd class="col-sm-10">@machine.MachineId</dd>
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@machine.Name</dd>
            <dt class="col-sm-2">Desc</dt>
            <dd class="col-sm-10">@machine.Desc</dd>
            <dt class="col-sm-2">RoomNr</dt>
            <dd class="col-sm-10">@machine.RoomNr</dd>
            <dt class="col-sm-2">Status</dt>
            <dd class="col-sm-10">@machine.Status</dd>
            <dt class="col-sm-2">StatusChanged</dt>
            <dd class="col-sm-10">@machine.StatusChanged</dd>
            <dt class="col-sm-2">CompanyId</dt>
            <dd class="col-sm-10">@machine.CompanyId</dd>
        </dl>
        <div>
            <a href="@($"/machines/edit?id={machine.Id}")">Edit</a> |
            <a href="@($"/machines")">Back to List</a>
        </div>
    }
</div>

@code {
    Machine? machine;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        machine = await DB.Machine.FirstOrDefaultAsync(m => m.Id == Id);

        if (machine is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}

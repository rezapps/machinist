@page "/companies/delete"
@inject machinist.Data.MachineContext DB
@using machinist.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Company</h4>
    <hr />
    @if (company is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@company.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Logo</dt>
            <dd class="col-sm-10">@company.Logo</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Address</dt>
            <dd class="col-sm-10">@company.Address</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Phone</dt>
            <dd class="col-sm-10">@company.Phone</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Desc</dt>
            <dd class="col-sm-10">@company.Desc</dd>
        </dl>
        <EditForm method="post" Model="company" OnValidSubmit="DeleteCompany" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(company is null)">Delete</button> |
            <a href="/companies">Back to List</a>
        </EditForm>
    }
</div>

@code {
    Company? company;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        company = await DB.Company.FirstOrDefaultAsync(m => m.Id == Id);

        if (company is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteCompany()
    {
        DB.Company.Remove(company!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/companies");
    }
}
